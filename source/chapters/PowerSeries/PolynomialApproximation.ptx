<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-PolynomialApproximation" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Polynomial Approximations of Functions</title>
    <introduction>
        <p>
            Before we start, it might be helpful to remind ourselves of the way we have used linear functions to approximate other functions in <xref ref="sec-LinearApproximation" text="type-global-title"/>.
        </p>
    </introduction>
    <subsection xml:id="subsec-WhatDoWeWant">
        <title>What Do We Want From a Polynomial Approximation?</title>
        <p>
            It's always good to lay out our expectations clearly. We want to make sure that, when we create this new <em>thing</em>, that we have some clear idea of what we're trying to accomplish in its creation. So let's start with our <xref ref="def-LinearApproximation" text="title"/>. What were the important properties of this linear function we created?
            <ol>
                <li>
                    <p>
                        The function's output, <m>f(x)</m>, matched the output from the linear approximation, <m>L(x)</m>, at the center <m>x=a</m>.
                        <md>
                            <mrow>L(x) \amp = f'(a)(x-a)+f(a) </mrow>
                            <mrow>L(a) \amp = f'(a)(a-a)+f(a)</mrow>
                            <mrow> \amp f(a)</mrow>
                        </md>
                    </p>
                </li>
                <li>
                    <p>
                        The function's first derivative, <m>f'(x)</m>, matched the slope of the linear approximation, <m>L'(x)</m>, at <m>x=a</m>.
                        <md>
                            <mrow>L'(x) \amp = \ddx{f'(a)(x-a)+f(a)} </mrow>
                            <mrow> \amp = f'(a)</mrow>
                            <mrow>L'(a) \amp = f'(a)</mrow>
                        </md>
                    </p>
                </li>
            </ol>
            This seems like a good structure! We have <m>f(a)=L(a)</m>, giving us that nice intersection between our approximation and the function we're approximating at the center. Then we used the slope of the function to estimate how our approximating function should move away from that center. The only real problem is that our function probably doesn't have a <em>constant</em> slope, while a constant slope is the defining characteristic of the line we're using.
        </p>
        <p>
            So how do we extend this, then, into a better approximation? Well, an easy next step is to make the slope of our approximating function change as we move away from the center, <m>x=a</m>. That way, maybe the slopes change in a way that's similar to the slopes of the actual function, and our approximating curve (not a line anymore) can follow the function for a bit longer. 
        </p>
        <p>
            What we're saying is that we want a function where the second derivative is <m>f''(a)</m>, just like our first derivative matched <m>f'(a)</m>. Instead of using letters like <m>L</m> for linear and <m>Q</m> for quadratic, let's just call these approximations by their function type (polynomials!) and degree. So <m>p_1(x)=f'(a)(x-a)+f(a)</m>, the first-degree polynomial approximation.
        </p>
        <p>
            Now, to find <m>p_2(x)</m>, we're going to add a term to the first-degree polynomial:
            <me>
                p_2(x) = <fillin characters="3" />(x-a)^2+f'(a)(x-a)+f(a)
            </me>
            Let's differentiate this function twice, and force it to match <m>f''(a)</m> at <m>x=a</m>.
            <md>
                <mrow> p_2(x) \amp= <fillin characters="3" />(x-a)^2+f'(a)(x-a)+f(a)</mrow>
                <mrow>p_2'(x) \amp = 2(<fillin characters="3" />)(x-a)+f'(a)</mrow>
                <mrow>p_2''(x) \amp = 2(<fillin characters="3" /> )</mrow>
            </md>
            What do we need to fill in the blank to make this match <m>f''(a)</m>?
            <md>
                <mrow>p_2''(x) \amp = 2\left(\frac{f''(a)}{2}\right) </mrow>
                <mrow> \amp = f''(a)</mrow>
            </md>
            So we get:
            <me>
                p_2(x) = \frac{f''(a)}{2}(x-a)^2+f'(a)(x-a)+f(a)
            </me>.
            What if we wanted a higher degree? Like, <m>p_3(x)</m>? Let's repeat the same process and see what happens!
            <md>
                <mrow>p_3(x) \amp = <fillin characters="3" />(x-a)^3 + \frac{f''(a)}{2}(x-a)^2+f'(a)(x-a)+f(a)</mrow>
                <mrow>p_3'(x) \amp = 3 (<fillin characters="3" />)(x-a)^2+f''(a)(x-a)+f'(a)</mrow>
                <mrow>p_3''(x) \amp = 3(2)(<fillin characters="3" />)(x-a)+f''(a)</mrow>
                <mrow>p_3'''(x) \amp = 3(2)(<fillin characters="3" />)</mrow>
            </md>
            If we, again, want this third derivative to match <m>f'''(a)</m> (so that the rate at which the slope changes as we move away from the center changes in the same way that it does on <m>f</m>...whew, that is going to be hard to interpret!), then we need to fill the blank in with <m>\dfrac{f'''(a)}{3(2)}</m>.
        </p>
    </subsection>
    <subsection xml:id="subsec-HowDoWeBuild">
        <title>How Do We Build a Polynomial Approximation?</title>
        <p>
            Let's jump into a generalization of what we've just done. Answer these few questions with yourself, just to make sure you can see where we're going:
            <ol>
                <li>
                    <p>
                        Why, in the coefficients for each term, do we have the derivative that matches the degree of the term? (First derivative for the first degree term, second derivative for the second degree term, and third derivative for the third degree term.)
                    </p>
                </li>
                <li>
                    <p>
                        Why, in the coefficients for each term, do we divide? What are we dividing by, and why do we need these numbers specifically?
                    </p>
                </li>
                <li>
                    <p>
                        If we add a 4th, 5th, and 6th term, what will we divide those 4th, 5th, and 6th derivatives (<m>f^{(4)}(a)</m>, <m>f^{(5)}(a)</m>, and <m>f^{(6)}(a)</m>) by?
                    </p>
                </li>
            </ol>
        </p>
        <definition xml:id="def-PolynomialApproximation">
            <title>Polynomial Approximation</title>          
            <statement>
                <p>
                    If <m>f(x)</m> is a function that is <m>n</m>-times differentiable at <m>x=a</m> (that is, the function/derivative values <m>f(a)</m>, <m>f'(a)</m>, <m>f''(a)</m>, ..., <m>f^{(n)}(a)</m> all exist), then the <m>n</m>th degree <term>polynomial approximation of <m>f(x)</m> centered at <m>x=a</m></term> is:
                    <md>
                        <mrow>p_n(x) \amp = f(a)+ f'(a)(x-a)+\frac{f''(a)}{2}(x-a)^2+...+ \frac{f^{(n)}(a)}{n!}(x-a)^n</mrow>
                        <mrow> \amp = \sum_{k=0}^n \frac{f^{(k)}(a)}{k!}(x-a)^k</mrow>
                    </md>
                </p>
            </statement>
        </definition>
        <xi:include href="./activities/act-BuildPolynomial.ptx" />
        <p>
            Now that we know how to build and use these, we should probably think about accuracy. Are the estimations coming from these polynomials even accurate? How do we talk about that?
        </p>
        <p>
            We won't formally define this too much for now: instead, we'll just look at things visually and see if we can figure out what might go into how we talk about accuracy of our estimations.
        </p>
        <xi:include href="./activities/act-CompareApproximations.ptx" />
        <p>
            So we have a couple of main ideas about the accuracy of our approximations. We don't need to formalize them, but we can use them as a guiding rule for how we talk about these polynomial approximations.
        </p>
        <assemblage xml:id="strat-ApproximationAccuracy">
            <title>Accuracy in Polynomial Approximations</title>
            <p>
                <ul>
                    <li>
                        <p>
                            Approximations using <m>x</m>-values closer to the center are likely to be more accurate than approximations using <m>x</m>-values farther away from the center.
                        </p>
                    </li>
                    <li>
                        <p>
                            Polynomials with larger degrees give more accurate approximations than polynomials with smaller degrees at the same <m>x</m>-values.
                        </p>
                    </li>
                </ul>
            </p>
        </assemblage>
    </subsection>
    <subsection xml:id="subsec-AreThesePartialSums">
        <title>Are These Partial Sums?</title>
        <p>
            We have been using some familiar language here...we're talking about these <q>approximations</q> improving as we increase some parameter, <m>n</m>. We have some intuition that when we increase <m>n</m>, these approximations <q>approach</q> an object (in this case, a function) in some sense. 
        </p>
        <p>
            We're adding more and more terms to this sum as we increase <m>n</m>. Is a polynomial approximation just a partial sum?
        </p>
        <p>
            Are we just going to look at a limit as <m>n\to\infty</m> and see what happens?
        </p>
        <xi:include href="./activities/act-PartialSumsOfWhat.ptx" />
        <p>
            We'll explore these polynomials more, but we're specifically interested in the infinite-series version of these things. We'll give these polynomials a name, for easy reference: <term>Taylor polynomials</term>.
        </p>
        <aside>
            <p>
                These polynomials are named after the 17th century British mathematician, Brook Taylor. Taylor is mostly famous for his contributions in this area of calculus, but he also sat on the committee that mediated a major dispute between Isaac Newton and Gottfried Leibniz centered around their individual claims to get credit for the <q>creation</q> of calculus.
            </p>
            <p>
                Taylor was not able to give an unbiased judgment, due to his public support of Isaac Newton.
            </p>
        </aside>
        <p>
            The main result to come out of this has to do with the relationship between these polynomials and the function they are approximating.
        </p>
        <theorem xml:id="thm-TaylorsTheorem">
            <title>Taylor's Theorem</title>
            <statement>
                <p>
                    If <m>f(x)</m> is a function that is <m>n</m>-times differentiable at <m>x=a</m>, then there is some remainder function, <m>R_n(x)</m>, such that:
                    <me>
                        f(x) = \left(\sum_{k=0}^n \frac{f^{(k)}(a)}{k!}(x-a)^k\right) + R_n(x)(x-a)^n
                    </me>
                    where <m>\displaystyle\lim_{x\to a}R_n(x)=0</m>.
                </p>
                <p>
                    That is, the remainder is small for <m>x</m>-values close to the center, <m>x=a</m>.
                </p>
            </statement>
        </theorem>
        <p>    
            This result is great, in that it gives us the confidence to approximate these functions. We can add on to this the idea that we expect <m>R_n(x)</m> to get smaller as <m>n\to\infty</m>. This should lead us to some idea of convergence, which we can think about here.
        </p>
        <xi:include href="./activities/act-ConvergeToWhat.ptx" />
        <p>
            Ok, so this is pretty interesting! For some functions, like <m>\sin(x)</m>, <m>e^x</m>, and <m>\cos(x)</m>, it seems like the polynomials that we built will end up matching (converging to) the functions pretty much everywhere: as <m>n\to\infty</m> we can get any function value from the polynomial, approximated to whatever accuracy we'd like!
        </p>
        <p>
            But that's different for the log function. We were only able to get our polynomial to match the function's behavior on a specific interval of <m>x</m>-values. No matter how high the degree of the polynomial was, we weren't able to get it close to approximating something like <m>\ln(10)</m>, for instance. Unless we changed the center, of course!
        </p>
        <p>
            This is going to bring up some great questions about how these partial sums converge to functions. We'll talk all about that in the next section!
        </p>
    </subsection>
</section>