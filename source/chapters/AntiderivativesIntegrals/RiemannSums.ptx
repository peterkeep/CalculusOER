<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-RiemannSums" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Riemann Sums and Area Approximations</title>

  <introduction>
    <p>
      One of the last things we said in <xref ref="sec-IndefiniteIntegrals"/> was that antiderivatives will be connected to areas. We're going to eventually show this! For now, though, we want to focus on areas defined by curves. 
    </p>
    <xi:include href="./activities/act-ApproximatingArea.ptx" />
    <p>
      Hopefully we've had a chance to think about and compare a couple of different strategies for estimating this area. What we want to do, though, is build a systematic way of estimating this area. We'd like it to have a couple of features:
      <ul>
        <li>
          <p>
            Easy area calculations. We don't want to have to spend a lot of time thinking about tricky area formulas, so simple shapes will be nicer to use.
          </p>
        </li>
        <li>
          <p>
            Flexibility. We want to be able to apply our approach to an area defined by any curve.
            <aside>
              <p>
                This is the problem with Archimedes' method: it only worked for areas defined by parabolas. Once we change our function to something else, Archimedes would have to come up with a completely new area formula for calculation. The techniques we're looking at now have the advantage of flexibility!
              </p>
            </aside>
          </p>
        </li>
        <li>
          <p>
            Precision. We want to be able to make our estimates as precise as we'd like. It's fine to come up with rough estimates, but we would like a method that allows us to increase the accuracy in our estimations.
          </p>
        </li>
      </ul>
    </p>
  </introduction>

  <subsection xml:id="subsec-RectangularApproximations">
    <title>Rectangular Approximations</title>
    <p>
      We're going to re-visit the same region as before, but this time we'll outline a process that should help us approximate the area with as much precision as we'd like.
    </p>
    <xi:include href="./activities/act-RectangularApproximation.ptx" />
    <p>
      This is our process! We'll refer to it often as the <term>slice-and-sum process</term>, since we are slicing out region into a bunch of pieces, approximating the area on each piece (by using one point to represent the whole slice), and then summing the areas back up.
    </p>
    <p>
      More formally, we can call this the Riemann Sum process, because the sum of the areas is a special form of summation.
    </p>
    <definition xml:id="def-RiemannSum">
      <title>Riemann Sum</title>
      <statement>
        <p>
          For a closed interval <m>[a,b]</m> with a partition <m>\{x_0, x_1, ..., x_n\}</m> with <m>a=x_0 \lt x_1\lt ...\lt x_n=b</m>, consider some <m>x_k^*</m>, any <m>x</m>-value in the interval <m>[x_{k-1}, x_k]</m> and <m>\Delta x_k</m>, the length of the interval <m>[x_{k-1}, x_k]</m>. If <m>f</m> is a function that is defined on the interval <m>[a,b]</m>, then we call the sum 
            <me>
              \sum_{k=1}^n f(x_k^*) \Delta x_k = f(x_1^*) \Delta x_1 + f(x_2^*)\Delta x_2 + ... + f(x_n^*) \Delta x_n
            </me>
            a <term>Riemann Sum</term> for <m>f</m> on <m>[a,b]</m>.
        </p>
      </statement>
    </definition>
    <note xml:id="note-RegularPartition"> 
      <p>
        In practice, we typically choose a <em>Regular Partition</em>, where each subinterval <m>[x_{k-1}, x_k]</m> is equally-wide, and so <m>\Delta x_k = \frac{b-a}{n}</m> for every <m>k=1,2,...,n</m>. We then normally write our Riemann sum as
        <me>
          \sum_{k=1}^n f(x_k^*) \Delta x = f(x_1^*) \Delta x + f(x_2^*)\Delta x + ... + f(x_n^*) \Delta x
        </me>
        where <m>\Delta x</m> is the value of the widths of all of the equally-sized subintervals.
      </p>
    </note>
  
  </subsection>

  <subsection xml:id="subsec-SelectionStrategy">
    <title>Selection Strategies</title>
    <p>
      This is great! We have a scalable way to approximate areas, and it seems like we can pretty easily increase the precision of our approximations by increasing <m>n</m>, the number of slices/rectangles that we use. And the great thing about this is that when we do increase <m>n</m>, we don't increase the complexity of our calculations! 
    </p>
    <p>
      Sure, it would be tedious to calculate and add 100 areas of rectangles by hand, but those area calculations don't get more difficult: there are just more of them.
    </p>
    <p>
      The only real downside is that when we increase the number of slices/rectangles, we are really increasing the number of decisions that we have to make: we have to choose an <m>x_k^*</m> for each subinterval, and so while it isn't hard to just calculate a bunch of areas and add them up, it is difficult, on a human level, to make a bunch of decisions about which <m>x</m>-value to choose from each subinterval. But this decision isn't even that important!
    </p>
    <p>
      We use the "star" notation on the <m>x_k^*</m> to represent the fact that it really doesn't matter which <m>x</m>-value gets chosen from the subinterval: as long as we pick one, we get an approximation! And when <m>n</m> increases, it matters less and less what the actual <m>x</m>-value is: as long as our function <m>f(x)</m> is continuous, then there will be not much variation among the <m>y</m>-value outputs for any <m>x</m>-values in each (small) interval!
    </p>
    <p>
      All of this to say: let's make a single decision about picking <m>n</m> <m>x</m>-values from <m>n</m> subintervals instead of having to make <m>n</m> decisions (one for each <m>x</m>-value).
    </p>
    <assemblage xml:id="strat-LeftRightMidRiemannSums">
      <title>Left, Right, and Midpoint Riemann Sums</title>
      <p>
        When we build a Riemann sum, we can make a choice to systematically choose the values for <m>x_k^*</m> (for <m>k=1,2,..., n</m>). There are many ways of doing this, but here are three:
        <ul>
          <li>
            <p>
              <em>Left Riemann Sum:</em> We pick the left-most <m>x</m>-value from each subinterval. That is, if the partition is <m>\{a=x_0, x_1, x_2, ..., b=x_n\}</m>, then we choose <m>\{a, x_1, x_2, ..., x_{n-1}\}</m> as our <m>x</m>-values to evaluate <m>f</m> at for the rectangle heights.
            </p>
            <p>
              We refer to these as <m>L_n</m>, a Left Riemann sum with <m>n</m> rectangles.
            </p>
          </li>
          <li>
            <p>
              <em>Right Riemann Sum:</em> We pick the right-most <m>x</m>-value from each subinterval. That is, if the partition is <m>\{a=x_0, x_1, x_2, ..., b=x_n\}</m>, then we choose <m>\{x_1, x_2, ..., b\}</m> as our <m>x</m>-values to evaluate <m>f</m> at for the rectangle heights.
            </p>
            <p>
              We refer to these as <m>R_n</m>, a Right Riemann sum with <m>n</m> rectangles.
            </p>
          </li>
          <li>
            <p>
              <em>Midpoint Riemann Sum:</em> We pick the <m>x</m>-value that is in the middle of each subinterval. That is, if the partition is <m>\{a=x_0, x_1, x_2, ..., b=x_n\}</m>, then we choose <m>\left\{\frac{a+x_1}{2}, \frac{x_1+x_2}{2}, ..., \frac{x_{n-1}+b}{2}\right\}</m> as our <m>x</m>-values to evaluate <m>f</m> at for the rectangle heights.
            </p>
            <p>
              We refer to these as <m>M_n</m>, a Midpoint Riemann sum with <m>n</m> rectangles.
            </p>
          </li>
        </ul>
      </p>
    </assemblage>
    <p>
      None of this is a requirement for a Riemann sum, but we will consistently find that when we limit the number of decisions that we have to make, the complexity of the calculation decreases.
    </p>
    <p>
      Notice that we've already made a similar choice with how we calculate <m>\Delta x</m>: it is not required that each rectangle have the same width, but it is very nice to not have to think about <m>n</m> different widths!
    </p>
    <p>
      Lastly, we'll finish with a nice interactive Riemann sum calculator. Feel free to explore some different graphs and see how the Riemann sums work when we change how we select the values for <m>x_k^*</m> as well as when we change the number of rectangles, <m>n</m>.
    </p>
    <interactive platform="doenetml" width="95%" aspect="1:1.6">
      <slate surface="doenetml">
          <xi:include parse="text" href="./doenet/RiemannSumN.xml"/>
      </slate>
  </interactive>
  </subsection>


</section>