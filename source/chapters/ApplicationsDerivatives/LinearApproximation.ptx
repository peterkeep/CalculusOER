<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-LinearApproximation" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Linear Approximations</title>
  <introduction>
    <p>
      We're going to return to a pretty central idea here, one that we've been using and developing and really exploring. But let's think about the very basic version of what we've been looking at over this whole chapter (and more):
    </p>
    <p>
      <em>The derivative of a function tells us the slope of the line tangent to the function at a point.</em>
    </p>
    <p>
      But what we'll do is explore how this tangent line and the graph of our function interact and relate to each other. Let's start with just playing with a graph and seeing if we can discover some things to say about the relationship between a tangent line and the function it is lying tangent to!
    </p>
    <interactive platform="doenetml" width="95%" aspect="1:1">
      <slate surface="doenetml">
          <xi:include parse="text" href="./doenet/LocalLinearity.xml"/>
      </slate>
  </interactive>
  <p>
    The effect that we are seeing when we zoom in on a function is sometimes described as our function being <term>locally linear</term>. What do you think this means? Why is this a good description of what we're looking at, and how these differentiable functions are constructed?
  </p>
  <p>
    Would this effect be noticeable for every function, even ones that are not differentiable at some points?
  </p>
  <p>
    Convince yourself that a function will not look locally linear at a point where the function is not differentiable. You might want to remind yourself what it looks like, graphically, when a derivative doesn't exist: <xref ref="strat-DerivativesDontExist" text="title"/>
  </p>
  </introduction>
  <subsection xml:id="subsec-LinearApproximation">
    <title>Linearly Approximating a Function</title>
    <p>
      The visual above should provide us with a nice framework to think about how we might approximate a function linearly, but we can recap some basic ideas:
      <ul>
        <li>
          <p>
            When we say "linear approximation," we're really just referring to the tangent line at some point.
          </p>
        </li>
        <li>
          <p>
            Our functions only look "locally linear" when we zoom in around some single point. Another way of saying this is that our tangent line only matches the behavior of our function really close to the point where we built the tangent line.
          </p>
        </li>
        <li>
          <p>
            We have a kind of vague or ambiguous idea of accuracy in approximation. While a tangent line follows the behavior of the function "around" that point where it was built, the actual rate at which it deviates from our function is different. If we move the point in the visual above, we'll see that at some locations, our function is pretty linear and doesn't move away from the tangent line very quickly. In other locations, the function turns quickly away from the tangent line! 
          </p>
        </li>
      </ul>
    </p>
    <definition xml:id="def-LinearApproximation">
      <title>Linear Approximation of a Function</title>      
      <statement>
        <p>
          If <m>f(x)</m> is differentiable at <m>x=a</m>, then we say that a <term>linear approximation</term> of <m>f(x)</m> centered at <m>x=a</m> is:
          <me>
            L(x) = f'(a)(x-a)+f(a)
          </me>.
          We know, then, that <m>L(x)\approx f(x)</m> for <m>x</m>-values "close" to the center, <m>x=a</m>. 
        </p>
        <p>
          Note that the <term>center</term> is just the point at which we are building this linear approximation: the point at which we build the tangent line.
        </p>
      </statement>
    </definition>
    <p>
      Let's see this in action!
    </p>
    <xi:include href="./activities/act-LinearApproximation-Exponential.ptx" />
    <p>
      In this activity, we did not have to think much about an appropriate choice of center. We tried to justify our choice, but that's different than having to <em>make</em> a choice. Let's approach this a bit differently in our next examples.
    </p>
    <xi:include href="./activities/act-LinearApproximations.ptx" />
    <p>
      So far, we have been pretty limited in what we can actually <em>do</em> with these linear approximations. A function is only locally linear when we look at a very small interval of <m>x</m>-values. Once we move away from the center far enough (and it's often not that far), then our function curves away from the tangent line and our linear approximation is not at all accurate.
    </p>
    <aside>
      <p>
        If you want to see how we can make these linear approximations more accurate, then we can try to think about using a quadratic or cubic function instead: something with some curves built into it that can try to follow the function's behavior a bit! We'll cover that in <xref ref="sec-PolynomialApproximation" text="type-global-title"/>.
      </p>
    </aside>
  </subsection>

  <subsection xml:id="subsec-ApproximatingZeros">
    <title>Approximating Zeros of a Function</title>
    <p>
      Let's look one really cool application of linear approximations before we finish things up in this section.
    </p>
    <p>
      In approximately 60 AD, Heron of Alexandria presented a method for approximating square roots (probably...historians know very little about exactly when Heron was born and died, but they think he saw an eclipse that matched one from 62 AD, so it's a good guess). This algorithm was presented along with different formulas for volumes and surface areas of a mixture of objects. 
    </p>
    <aside>
      <p>
        You might know of Heron from Heron's formula for the area of a triangle!
      </p>
    </aside>
    <p>
      Over 1000 years later, in the late 1660's, Isaac Newton was one of a long list of mathematicians  to re-create this formula in a more general way, where we can use it to approximate roots of polynomials. This method was later extended by several different mathematicians, and is now known as the <term>Newton-Raphson method</term>, or sometimes more simply <term>Newton's method</term>.
    </p>
    <xi:include href="./activities/act-NewtonsMethod.ptx" />
    <definition xml:id="def-NewtonsMethod">
      <title>Newton's Method for Approximating Zeros of Functions</title>
      <statement>
        <p>
          If <m>x_0</m> is some initial estimation of a solution to <m>f(x)=0</m>, then we we can iteratively generate more estimations using the following formula:
          <me>x_n = x_{n-1} - \frac{f(x_{n-1})}{f'(x_{n-1})}</me> 
          provided that <m>f'(x_{n-1})</m> exists and is non-zero.
        </p>
      </statement>
    </definition>
    <p>
      A good question to ask is about when this process stops. If we want to estimate some <m>x</m>-intercept of a function, like <m>\sqrt{2}</m> in <xref ref="act-NewtonsMethod"/>, then how many steps is enough? There are a couple of ways we can approach this:
      <ol>
        <li>
          <p>
            We can just state at the beginning how many iterations we're going to do. This is what happened in <xref ref="act-NewtonsMethod"/>, since this activity was written to only make you calculate a specific number of these estimations. We could have started by saying that we'll calculate this 3 times, or maybe 100 times.
          </p>
        </li>
        <li>
          <p>
            We can test to see what <m>f(x_n)</m> is, and then stop when it is within some pre-determined distance from 0. We also did this when we noticed that <m>f\left(\frac{3}{2}\right)=\frac{1}{4}</m> was not very close to 0 (after our first estimation), and so we should calculate this again. We could start by saying that we'll continue until we see a <m>y</m>-value that is within 0.0001 of 0, or some other small distance.
          </p>
        </li>
        <li>
          <p>
            We can test to see how close our approximations are to each other, and stop when they're close enough. We saw this happen in the visualization: the last two estimates were the same! They actually weren't, but since the applet only displayed 4 decimal places, the numbers appeared the same after rounding. Maybe we set some criteria there, or we look at the distance between <m>x_n</m> and <m>x_{n-1}</m> (two successive estimates) and stop when they are within some distance from each other.
          </p>
        </li>
      </ol>
      In reality, we often choose a combination of these. Maybe we set distance threshold for stopping, but use a maximum of 10 iterations as a backup plan. This happens often when we code this algorithm and have a computer run it. It is possible for this code to never give us two successive estimates that are close enough to stop, and so the code would run forever unless we cut it off at 100 iterations or some other value.
    </p>
    <p>
      A wonderful thing about this small process is that, while it is ancient (dating back to Heron in the first or second century), it is still used today. This is a powerful estimation method that can be used in a variety of areas including statistics and data science.
    </p>
  </subsection>
</section>